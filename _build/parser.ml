type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | COMMA
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | ELSEIF
  | FOR
  | IN
  | WHILE
  | BREAK
  | CONTINUE
  | INT
  | FLOAT
  | STR
  | BOOL
  | VOID
  | POINT
  | LINE
  | LIST
  | NULL
  | STRUCT
  | LITERAL of (int)
  | FLOAT_LITERAL of (float)
  | BOOLEAN_LITERAL of (bool)
  | ID of (string)
  | STRING_LITERAL of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast
# 59 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACKET *);
  261 (* RBRACKET *);
  262 (* LBRACE *);
  263 (* RBRACE *);
  264 (* COMMA *);
  265 (* DOT *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
  270 (* MOD *);
  271 (* ASSIGN *);
  272 (* NOT *);
  273 (* EQ *);
  274 (* NEQ *);
  275 (* LT *);
  276 (* LEQ *);
  277 (* GT *);
  278 (* GEQ *);
  279 (* TRUE *);
  280 (* FALSE *);
  281 (* AND *);
  282 (* OR *);
  283 (* RETURN *);
  284 (* IF *);
  285 (* ELSE *);
  286 (* ELSEIF *);
  287 (* FOR *);
  288 (* IN *);
  289 (* WHILE *);
  290 (* BREAK *);
  291 (* CONTINUE *);
  292 (* INT *);
  293 (* FLOAT *);
  294 (* STR *);
  295 (* BOOL *);
  296 (* VOID *);
  297 (* POINT *);
  298 (* LINE *);
  299 (* LIST *);
  300 (* NULL *);
  301 (* STRUCT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  302 (* LITERAL *);
  303 (* FLOAT_LITERAL *);
  304 (* BOOLEAN_LITERAL *);
  305 (* ID *);
  306 (* STRING_LITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\006\000\006\000\008\000\
\008\000\005\000\010\000\010\000\011\000\012\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\004\000\014\000\014\000\015\000\015\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\013\000\013\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\016\000\016\000\017\000\017\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\000\000\004\000\003\000\
\005\000\005\000\000\000\002\000\002\000\005\000\002\000\001\000\
\003\000\003\000\005\000\007\000\008\000\009\000\007\000\005\000\
\002\000\002\000\008\000\000\000\001\000\002\000\004\000\001\000\
\001\000\001\000\001\000\001\000\002\000\001\000\001\000\002\000\
\000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\002\000\003\000\
\003\000\005\000\003\000\006\000\004\000\006\000\004\000\003\000\
\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\077\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\033\000\035\000\034\000\036\000\038\000\039\000\000\000\048\000\
\000\000\043\000\044\000\046\000\000\000\045\000\001\000\003\000\
\004\000\005\000\000\000\016\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\063\000\000\000\000\000\000\000\000\000\
\025\000\026\000\000\000\037\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\072\000\065\000\000\000\017\000\012\000\000\000\018\000\000\000\
\000\000\000\000\000\000\040\000\006\000\000\000\000\000\000\000\
\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\
\053\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\024\000\010\000\000\000\000\000\000\000\
\000\000\030\000\000\000\000\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\070\000\011\000\000\000\020\000\000\000\
\000\000\013\000\023\000\000\000\000\000\007\000\000\000\031\000\
\021\000\000\000\000\000\027\000\000\000\022\000\000\000\014\000"

let yydgoto = "\002\000\
\003\000\004\000\077\000\033\000\034\000\112\000\078\000\036\000\
\037\000\042\000\135\000\146\000\082\000\118\000\119\000\040\000\
\041\000"

let yysindex = "\005\000\
\000\000\000\000\000\000\050\000\032\255\032\255\000\000\032\255\
\032\255\032\255\025\255\031\255\040\255\029\255\050\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\122\255\000\000\
\024\255\000\000\000\000\000\000\010\255\000\000\000\000\000\000\
\000\000\000\000\026\255\000\000\176\001\006\002\143\002\072\255\
\085\255\141\255\000\000\000\000\198\001\032\255\032\255\032\255\
\000\000\000\000\045\255\000\000\091\255\032\255\032\255\052\255\
\032\255\001\255\000\000\032\255\032\255\032\255\032\255\032\255\
\032\255\032\255\032\255\032\255\032\255\032\255\032\255\032\255\
\000\000\000\000\032\255\000\000\000\000\053\255\000\000\026\002\
\103\002\098\255\046\002\000\000\000\000\102\255\126\002\020\255\
\143\002\000\000\122\255\032\255\027\255\027\255\092\255\092\255\
\000\000\189\002\189\002\197\255\197\255\197\255\197\255\176\002\
\160\002\143\002\017\255\099\000\032\255\032\255\099\000\047\255\
\000\000\096\255\032\255\032\255\061\255\113\255\116\255\220\001\
\100\255\066\002\242\001\000\000\000\000\082\255\032\255\130\255\
\143\002\000\000\128\255\122\255\000\000\099\000\028\255\099\000\
\032\255\140\255\143\002\000\000\000\000\097\255\000\000\099\000\
\142\255\000\000\000\000\143\002\146\255\000\000\190\255\000\000\
\000\000\032\255\099\000\000\000\086\002\000\000\099\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\145\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\149\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\114\255\000\000\
\018\255\000\000\000\000\000\000\000\000\000\000\153\255\000\000\
\000\000\000\000\000\000\000\000\107\255\167\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\170\255\000\000\000\000\000\000\000\000\000\000\000\000\175\000\
\134\255\000\000\192\255\000\000\023\001\049\001\227\000\253\000\
\000\000\095\255\240\255\075\001\101\001\127\001\153\001\012\255\
\023\255\120\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\201\000\167\255\000\000\000\000\000\000\195\255\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\246\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\196\255\000\000\150\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\199\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\252\255\000\000\000\000\000\000\006\000\000\000\
\255\255\032\000\000\000\000\000\056\000\000\000\000\000\213\255\
\000\000"

let yytablesize = 979
let yytable = "\032\000\
\019\000\090\000\091\000\038\000\039\000\001\000\043\000\044\000\
\045\000\035\000\086\000\054\000\060\000\055\000\060\000\092\000\
\060\000\090\000\056\000\060\000\074\000\115\000\074\000\061\000\
\057\000\061\000\046\000\061\000\052\000\049\000\061\000\092\000\
\047\000\005\000\116\000\006\000\060\000\060\000\062\000\063\000\
\064\000\048\000\008\000\060\000\080\000\081\000\083\000\009\000\
\061\000\031\000\050\000\125\000\039\000\087\000\061\000\089\000\
\144\000\145\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\103\000\104\000\105\000\128\000\
\053\000\106\000\058\000\024\000\074\000\026\000\027\000\028\000\
\029\000\030\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\120\000\051\000\075\000\084\000\085\000\054\000\
\117\000\054\000\110\000\054\000\088\000\107\000\054\000\121\000\
\113\000\064\000\124\000\122\000\123\000\130\000\127\000\054\000\
\054\000\039\000\129\000\131\000\075\000\126\000\075\000\054\000\
\054\000\075\000\076\000\132\000\076\000\139\000\054\000\076\000\
\134\000\143\000\138\000\147\000\140\000\141\000\064\000\148\000\
\064\000\142\000\064\000\153\000\150\000\064\000\005\000\154\000\
\006\000\152\000\007\000\076\000\155\000\073\000\158\000\008\000\
\157\000\041\000\160\000\040\000\009\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\064\000\051\000\010\000\
\011\000\073\000\042\000\012\000\151\000\013\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\024\000\051\000\026\000\027\000\028\000\029\000\030\000\005\000\
\149\000\006\000\028\000\007\000\156\000\029\000\041\000\000\000\
\008\000\042\000\000\000\000\000\000\000\009\000\060\000\061\000\
\062\000\063\000\064\000\000\000\000\000\000\000\000\000\000\000\
\010\000\011\000\000\000\000\000\012\000\000\000\013\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\024\000\051\000\026\000\027\000\028\000\029\000\030\000\
\055\000\000\000\055\000\000\000\055\000\000\000\066\000\055\000\
\066\000\000\000\066\000\000\000\000\000\066\000\000\000\000\000\
\055\000\055\000\019\000\000\000\019\000\000\000\019\000\019\000\
\055\000\055\000\000\000\019\000\000\000\000\000\000\000\055\000\
\019\000\000\000\000\000\000\000\000\000\066\000\000\000\000\000\
\000\000\000\000\000\000\019\000\019\000\000\000\019\000\019\000\
\000\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\005\000\000\000\006\000\000\000\007\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\011\000\000\000\000\000\
\012\000\000\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\029\000\030\000\005\000\000\000\006\000\000\000\
\007\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\
\000\000\000\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\011\000\000\000\
\000\000\012\000\000\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\051\000\
\026\000\027\000\028\000\029\000\030\000\047\000\068\000\047\000\
\068\000\047\000\068\000\000\000\047\000\068\000\047\000\047\000\
\047\000\047\000\047\000\000\000\000\000\047\000\047\000\047\000\
\047\000\047\000\047\000\000\000\000\000\047\000\047\000\067\000\
\000\000\067\000\000\000\067\000\047\000\068\000\067\000\000\000\
\067\000\067\000\067\000\067\000\067\000\000\000\000\000\067\000\
\067\000\067\000\067\000\067\000\067\000\000\000\000\000\067\000\
\067\000\069\000\000\000\069\000\000\000\069\000\067\000\000\000\
\069\000\000\000\069\000\069\000\069\000\069\000\069\000\000\000\
\000\000\069\000\069\000\069\000\069\000\069\000\069\000\000\000\
\000\000\069\000\069\000\051\000\000\000\051\000\000\000\051\000\
\069\000\000\000\051\000\000\000\051\000\051\000\051\000\051\000\
\000\000\000\000\000\000\051\000\051\000\051\000\051\000\051\000\
\051\000\000\000\000\000\051\000\051\000\052\000\000\000\052\000\
\000\000\052\000\051\000\000\000\052\000\000\000\052\000\052\000\
\052\000\052\000\000\000\000\000\000\000\052\000\052\000\052\000\
\052\000\052\000\052\000\000\000\000\000\052\000\052\000\049\000\
\000\000\049\000\000\000\049\000\052\000\000\000\049\000\000\000\
\049\000\049\000\000\000\000\000\000\000\000\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\000\000\000\000\049\000\
\049\000\050\000\000\000\050\000\000\000\050\000\049\000\000\000\
\050\000\000\000\050\000\050\000\000\000\000\000\000\000\000\000\
\000\000\050\000\050\000\050\000\050\000\050\000\050\000\000\000\
\000\000\050\000\050\000\056\000\000\000\056\000\000\000\056\000\
\050\000\000\000\056\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\000\056\000\056\000\056\000\056\000\
\056\000\000\000\000\000\056\000\056\000\057\000\000\000\057\000\
\000\000\057\000\056\000\000\000\057\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\057\000\057\000\057\000\
\057\000\057\000\057\000\000\000\000\000\057\000\057\000\058\000\
\000\000\058\000\000\000\058\000\057\000\000\000\058\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\058\000\
\058\000\058\000\058\000\058\000\058\000\000\000\000\000\058\000\
\058\000\059\000\000\000\059\000\000\000\059\000\058\000\000\000\
\059\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\059\000\059\000\059\000\059\000\059\000\059\000\000\000\
\059\000\059\000\059\000\000\000\000\000\000\000\000\000\000\000\
\059\000\060\000\061\000\062\000\063\000\064\000\000\000\000\000\
\065\000\066\000\067\000\068\000\069\000\070\000\079\000\000\000\
\071\000\072\000\000\000\000\000\000\000\000\000\000\000\060\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\133\000\000\000\071\000\072\000\
\000\000\000\000\000\000\000\000\000\000\060\000\061\000\062\000\
\063\000\064\000\000\000\000\000\065\000\066\000\067\000\068\000\
\069\000\070\000\137\000\000\000\071\000\072\000\000\000\000\000\
\000\000\000\000\000\000\060\000\061\000\062\000\063\000\064\000\
\000\000\000\000\065\000\066\000\067\000\068\000\069\000\070\000\
\073\000\000\000\071\000\072\000\000\000\000\000\000\000\060\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\108\000\000\000\071\000\072\000\
\000\000\000\000\000\000\060\000\061\000\062\000\063\000\064\000\
\000\000\000\000\065\000\066\000\067\000\068\000\069\000\070\000\
\111\000\000\000\071\000\072\000\000\000\000\000\000\000\060\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\136\000\000\000\071\000\072\000\
\000\000\000\000\000\000\060\000\061\000\062\000\063\000\064\000\
\000\000\000\000\065\000\066\000\067\000\068\000\069\000\070\000\
\159\000\000\000\071\000\072\000\000\000\000\000\000\000\060\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\000\000\000\000\071\000\072\000\
\060\000\061\000\062\000\063\000\064\000\000\000\000\000\065\000\
\066\000\067\000\068\000\069\000\070\000\000\000\000\000\071\000\
\072\000\000\000\114\000\000\000\000\000\000\000\109\000\060\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\000\000\000\000\071\000\072\000\
\060\000\061\000\062\000\063\000\064\000\000\000\000\000\065\000\
\066\000\067\000\068\000\069\000\070\000\000\000\000\000\071\000\
\072\000\060\000\061\000\062\000\063\000\064\000\000\000\000\000\
\065\000\066\000\067\000\068\000\069\000\070\000\000\000\000\000\
\071\000\060\000\061\000\062\000\063\000\064\000\000\000\000\000\
\065\000\066\000\067\000\068\000\069\000\070\000\060\000\061\000\
\062\000\063\000\064\000\000\000\000\000\000\000\000\000\067\000\
\068\000\069\000\070\000"

let yycheck = "\004\000\
\000\000\001\001\002\001\005\000\006\000\001\000\008\000\009\000\
\010\000\004\000\054\000\002\001\001\001\004\001\003\001\015\001\
\005\001\001\001\009\001\008\001\003\001\002\001\005\001\001\001\
\015\001\003\001\002\001\005\001\023\000\001\001\008\001\015\001\
\002\001\002\001\015\001\004\001\025\001\026\001\012\001\013\001\
\014\001\002\001\011\001\032\001\046\000\047\000\048\000\016\001\
\026\001\000\000\001\001\005\001\054\000\055\000\032\001\057\000\
\029\001\030\001\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\115\000\
\049\001\075\000\049\001\044\001\005\001\046\001\047\001\048\001\
\049\001\050\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\092\000\045\001\008\001\049\001\004\001\001\001\
\091\000\003\001\001\001\005\001\049\001\049\001\008\001\108\000\
\003\001\014\001\111\000\109\000\110\000\049\001\015\001\017\001\
\018\001\115\000\116\000\003\001\003\001\112\000\005\001\025\001\
\026\001\008\001\003\001\008\001\005\001\127\000\032\001\008\001\
\029\001\134\000\049\001\136\000\003\001\006\001\001\001\137\000\
\003\001\132\000\005\001\144\000\001\001\008\001\002\001\002\001\
\004\001\049\001\006\001\007\001\003\001\005\001\155\000\011\001\
\154\000\001\001\159\000\049\001\016\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\032\001\045\001\027\001\
\028\001\003\001\001\001\031\001\141\000\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\002\001\
\137\000\004\001\003\001\006\001\007\001\003\001\003\001\255\255\
\011\001\003\001\255\255\255\255\255\255\016\001\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\255\255\255\255\031\001\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\001\001\255\255\003\001\255\255\005\001\255\255\001\001\008\001\
\003\001\255\255\005\001\255\255\255\255\008\001\255\255\255\255\
\017\001\018\001\002\001\255\255\004\001\255\255\006\001\007\001\
\025\001\026\001\255\255\011\001\255\255\255\255\255\255\032\001\
\016\001\255\255\255\255\255\255\255\255\032\001\255\255\255\255\
\255\255\255\255\255\255\027\001\028\001\255\255\030\001\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\002\001\255\255\004\001\255\255\006\001\
\255\255\255\255\255\255\255\255\011\001\255\255\255\255\255\255\
\255\255\016\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\027\001\028\001\255\255\255\255\
\031\001\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\002\001\255\255\004\001\255\255\
\006\001\255\255\255\255\255\255\255\255\011\001\255\255\255\255\
\255\255\255\255\016\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\028\001\255\255\
\255\255\031\001\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\001\001\001\001\003\001\
\003\001\005\001\005\001\255\255\008\001\008\001\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\255\255\025\001\026\001\001\001\
\255\255\003\001\255\255\005\001\032\001\032\001\008\001\255\255\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\025\001\
\026\001\001\001\255\255\003\001\255\255\005\001\032\001\255\255\
\008\001\255\255\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\001\001\255\255\003\001\255\255\005\001\
\032\001\255\255\008\001\255\255\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\025\001\026\001\001\001\255\255\003\001\
\255\255\005\001\032\001\255\255\008\001\255\255\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\255\255\025\001\026\001\001\001\
\255\255\003\001\255\255\005\001\032\001\255\255\008\001\255\255\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\025\001\
\026\001\001\001\255\255\003\001\255\255\005\001\032\001\255\255\
\008\001\255\255\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\001\001\255\255\003\001\255\255\005\001\
\032\001\255\255\008\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\025\001\026\001\001\001\255\255\003\001\
\255\255\005\001\032\001\255\255\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\255\255\025\001\026\001\001\001\
\255\255\003\001\255\255\005\001\032\001\255\255\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\025\001\
\026\001\001\001\255\255\003\001\255\255\005\001\032\001\255\255\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\001\001\025\001\026\001\255\255\255\255\255\255\255\255\255\255\
\032\001\010\001\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\001\001\255\255\
\025\001\026\001\255\255\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\001\001\255\255\025\001\026\001\
\255\255\255\255\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\001\001\255\255\025\001\026\001\255\255\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\003\001\255\255\025\001\026\001\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\003\001\255\255\025\001\026\001\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\003\001\255\255\025\001\026\001\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\003\001\255\255\025\001\026\001\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\003\001\255\255\025\001\026\001\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\025\001\026\001\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\025\001\
\026\001\255\255\005\001\255\255\255\255\255\255\032\001\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\025\001\026\001\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\025\001\
\026\001\010\001\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\025\001\010\001\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  DOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  ELSEIF\000\
  FOR\000\
  IN\000\
  WHILE\000\
  BREAK\000\
  CONTINUE\000\
  INT\000\
  FLOAT\000\
  STR\000\
  BOOL\000\
  VOID\000\
  POINT\000\
  LINE\000\
  LIST\000\
  NULL\000\
  STRUCT\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  FLOAT_LITERAL\000\
  BOOLEAN_LITERAL\000\
  ID\000\
  STRING_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 37 "parser.mly"
            ( let (a, b, c) = _1 in  (a, List.rev b, c) )
# 532 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "parser.mly"
                    ( [], [], [])
# 538 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 42 "parser.mly"
               ( let (a, b, c) = _1 in (_2 :: a), b,c )
# 546 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 43 "parser.mly"
                ( let (a, b, c) = _1 in a, (_2 :: b),c )
# 554 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sdecl) in
    Obj.repr(
# 44 "parser.mly"
                ( let (a, b, c) = _1 in a,b, (_2 :: c) )
# 562 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "parser.mly"
                     ( [] )
# 568 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 48 "parser.mly"
                           ( Vdecl(_2, _3) :: _1 )
# 577 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 51 "parser.mly"
                           ( Vdecl(_1, _2) )
# 585 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 52 "parser.mly"
                           ( Block([Vdecl(_1, _2);Expr(Assign(_2,_4))]) )
# 594 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    Obj.repr(
# 60 "parser.mly"
      ( {
      sname = _2;
      s_stmt_list = List.rev _4;
      } )
# 605 "parser.ml"
               : 'sdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
                    ( [] )
# 611 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 68 "parser.mly"
                    ( _2 :: _1 )
# 619 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'elseif_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'elseif) in
    Obj.repr(
# 72 "parser.mly"
                        ( _2 :: _1 )
# 627 "parser.ml"
               : 'elseif_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 75 "parser.mly"
                                 ( Elseif(_3, _5) )
# 635 "parser.ml"
               : 'elseif))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                                       ( Expr _1 )
# 642 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 80 "parser.mly"
                                       ( _1 )
# 649 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 81 "parser.mly"
                                       ( Block(List.rev _2) )
# 656 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                              ( Return(_2) )
# 663 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 84 "parser.mly"
                                             ( If(_3, _5, Block([]), Block([])) )
# 671 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 85 "parser.mly"
                                          ( If(_3, _5, Block([]), _7) )
# 680 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'stmt) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'elseif_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 86 "parser.mly"
                                                      ( If(_3, _5,  Block(_6), _8) )
# 690 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 88 "parser.mly"
                                                            ( For(_3, _5, _7, _9) )
# 700 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 89 "parser.mly"
                                        ( Foreach(_3, _5, _7))
# 709 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 90 "parser.mly"
                                   ( While(_3, _5) )
# 717 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                ( Break )
# 723 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
                   ( Continue )
# 729 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 97 "parser.mly"
     ( { typ = _1;
	 fname = _2;
	 formals = _4;
	 body = List.rev _7 } )
# 742 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
                  ( [] )
# 748 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 104 "parser.mly"
                  ( List.rev _1 )
# 755 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "parser.mly"
                             ( [(_1,_2)] )
# 763 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 108 "parser.mly"
                             ( (_3,_4) :: _1 )
# 772 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
        ( Int )
# 778 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
          ( Float )
# 784 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
         ( Bool )
# 790 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
         ( Str )
# 796 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "parser.mly"
         ( Void )
# 802 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 116 "parser.mly"
             ( ListTyp(_2) )
# 809 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parser.mly"
         ( Pot )
# 815 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "parser.mly"
         ( Lin )
# 821 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 119 "parser.mly"
                ( Objecttype(_2) )
# 828 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "parser.mly"
                  ( Noexpr )
# 834 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                  ( _1 )
# 841 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 135 "parser.mly"
                     ( Literal(_1) )
# 848 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 136 "parser.mly"
                     ( FloatLit(_1) )
# 855 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 137 "parser.mly"
                     ( StringLit(_1) )
# 862 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 138 "parser.mly"
                     ( BoolLit(_1) )
# 869 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 139 "parser.mly"
                     ( Id(_1) )
# 876 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "parser.mly"
                     ( Noexpr )
# 882 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 890 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 898 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 149 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 906 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 914 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 151 "parser.mly"
                     ( Binop(_1, Mod,   _3) )
# 922 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 930 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 153 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 938 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 946 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 954 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 962 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 970 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 978 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 159 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 986 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
                         ( Unop(Neg, _2) )
# 993 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "parser.mly"
                     ( Unop(Not, _2) )
# 1000 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "parser.mly"
                     ( Assign(_1, _3) )
# 1008 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_opt) in
    Obj.repr(
# 165 "parser.mly"
                               ( List(_2) )
# 1015 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                          (StructAssign(_1, _3, _5))
# 1024 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 167 "parser.mly"
                     ( StructAccess(_1, _3) )
# 1032 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                                             ( ListAssign(_1, _3, _6) )
# 1041 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 169 "parser.mly"
                              ( Mem(_1, _3) )
# 1049 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'list_opt) in
    Obj.repr(
# 170 "parser.mly"
                                     ( Objcall(_1, _3, _5) )
# 1058 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list_opt) in
    Obj.repr(
# 173 "parser.mly"
                              ( Call(_1, _3) )
# 1066 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 174 "parser.mly"
                       ( _2 )
# 1073 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 178 "parser.mly"
                 ( [] )
# 1079 "parser.ml"
               : 'list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list) in
    Obj.repr(
# 179 "parser.mly"
                 ( List.rev _1 )
# 1086 "parser.ml"
               : 'list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 182 "parser.mly"
                    ( [_1] )
# 1093 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
                    ( _3 :: _1 )
# 1101 "parser.ml"
               : 'list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
